#+STARTUP: showeverything
#+TITLE: MYou API Documentation
#+AUTHOR: James Price
#+OPTIONS: toc:1 num:2
#+OPTIONS: \n:t

#+LATEX: \pagebreak
#+LATEX: \begin{center}
_Versioning_
#+LATEX: \end{center}
| Version | Author      | Comments                           | Date               |
|---------+-------------+------------------------------------+--------------------|
|     1.0 | James Price | initial version                    | July 29,2020       |
|     1.1 | James Price | remove ToC,                        | July 30,2020       |
|         |             | add description of API definition  |                    |
|     1.2 | James Price | formatting changes                 | July 31,2020       |
|     1.3 | James Price | added password reset api endpoints | August 12, 2020    |
|     1.4 | James Price | updated request password reset     | August 16, 2020    |
|     1.5 | James Price | updated API call parameters and    |                    |
|         |             | added caveat                       | August 18, 2020    |
|     1.6 | James Price | modified 'register' api call       | September 27, 2020 |
|         |             |                                    |                    |


#+LATEX: \pagebreak

 **Items marked 'TODO' are not completed/started yet.**

* _Definitions_
** _API description will be in the following format:_
*** Module Name that encapsulates the API
**** _API name_

 *REST*: type (POST/GET/PUT, etc)
 *URL*:  API (minus the Fully Qualified Domain Name) endpoint
 *Headers*: required (if any) headers
 *Parameters*: list of parameters (to include data type and length)
 *Defaults*: list of default values for parameters (if needed)
 *Returns*: Data and HTTP response code
 *Datatable*: SQL used to generate backend database table.
* _Authentication/Authorization:_
** _Login_
REST: POST
URL: '/auth/login'
Headers: Content-Type: application/json
Parameters:
- email :: string, max 254 characters
- password :: text, unlimited length. Stored as a (randomly) salted hash in the password field in the db.
Returns: a bare JWT in the body of the response, like so -
#+BEGIN_SRC javascript
{
  "userid": "631c4d9b-e13a-47ef-8b54-8fba507d760d",
  "iat": 1596044457,
  "exp": 1596649257
}
#+END_SRC

*** TODO this will be changed in the future to match the following [[http://self-issued.info/docs/draft-ietf-oauth-v2-bearer.html#ExAccTokResp][OAuth 2.0 Authorization Bearer Framework: Bearer Token Usage]]
*** Note - this is also dependent upon the definition of the Mirada Media jwt. The MM jwt will be either embedded in the above jwt, or alongside it in the JSON response
** _Logout_
*REST*: POST
*URL*: '/auth/logout'
*Headers*: Authorization (jwt)
*Returns*: HTTP 200
{
"message": /one of the following/
"Logout completed" - if jwt was valid
"User not logged in" - if jwt is invalid/expired/missing
}
*Returns*: HTTP 401 if user authorization header not present
*NOTE*: It is the responsibility of the caller to remove the jwt from local storage/memory & not attempt to reuse. In future, jwt will be added to a blacklist until expiry time

** _Authorize_  
*not implemented. Not sure we need it at this point - why would the mobile or web app need to authorize? It would be handled in the module doing the work.*

** _Request Password Reset_
*REST*: GET
*URL*: '/auth/requestpasswordreset?email=someemail@somseerver.com'
*HEADERS*: none
*Parameters*: email address is a URL query parameter
*Returns*: HTTP 200, returns HTTP 401 if no email query parameter. *NOTE* No error message is returned if the email does not exist (to prevent fishing), 
HTTP 200 is returned. HTTP 401 returns ONLY if there is no email query parameter, or there is an error. If the request uses an existing account email id, a reset email is sent to that email address.

** _Reset Password_
*REST*: POST
*URL*: '/auth/resetpassword
*HEADERS*: Content-Type: application/json
*Parameters*: password (the new password), userEmail(users email address), guid(guid returned in the password reset email)
*NOTE*: at this time the password reset *PAGE* does not work, grab the guid from the email, and manually post to this API endpoint.
*Returns*: HTTP 200 if password reset was successful, HTTP 401 if the reset failed for any reason

* _User_
** _Register new user_
*** REST: POST
*** URL: '/auth/register'
*** Headers: Content-Type: application/json
*** Parameters: firstname, lastname, aka, password, email, phone, type 
- type : one of the following: fan/artist
*** Returns: {status: "success"} & HTTP 200 if registration completed, 401 if unsuccessful
*** TODO (update this to match actual schema) Datatable:
#+BEGIN_SRC sql
-- Table: public.users

-- DROP TABLE public.users;

CREATE TABLE public.users
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    email text COLLATE pg_catalog."default" NOT NULL,
    password text COLLATE pg_catalog."default" NOT NULL,
    lastname character varying(254) COLLATE pg_catalog."default",
    phone character varying(50) COLLATE pg_catalog."default",
    verified_phone boolean DEFAULT false,
    verified_email boolean DEFAULT false,
    type text COLLATE pg_catalog."default",
    permissions text COLLATE pg_catalog."default",
    affiliate uuid NOT NULL DEFAULT gen_random_uuid(),
    firstname character varying(254) COLLATE pg_catalog."default",
    aka character varying(254) COLLATE pg_catalog."default"
)
WITH (
    OIDS = FALSE
)

COMMENT ON COLUMN public.users.affiliate
    IS 'affiliate number';
-- Index: affiliate

-- DROP INDEX public.affiliate;

CREATE UNIQUE INDEX affiliate
    ON public.users USING btree
    (affiliate ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: email

-- DROP INDEX public.email;

CREATE UNIQUE INDEX email
    ON public.users USING btree
    (email COLLATE pg_catalog."default" ASC NULLS LAST)
    INCLUDE(email)
    TABLESPACE pg_default;
#+END_SRC
** Delete user
*** REST: POST
*** URL: '/auth/remove'
*** Headers: Contenty-Type: application/json, Authorization (JWT)
*** Paramters: email
*** Returns: [status: "success"} & HTTP 200 if removal completed, HTTP 401 if unsuccessful
** IN-PROGRESS _GetProfile_
*** REST: GET
*** URL: '/auth/getuserinfo'
*** Headers: Authorization (JWT)
*** Parameters: none
*** Returns: json datastructre with the following fields:
id,
email,
firstname,
lastname,
aka,
phone,
verified_phone,
verified_email


** TODO _UpdateProfile_
*** REST: POST
*** URL: '/auth/updateprofile'
*** Headers: Authorization (JWT), Content-Type: application/json
*** Parameters: profile (JSON object with ONLY updated data. UserId from the JWT in the auth header will be used to ID the account)
** TODO _Add Profile Pic_
*** REST: POST
*** URL: '/auth/addprofilepic'
*** Headers: Authorization (JWT)
*** Parameters: profilepic (binary image file. Accepts jpg/png/gif/webp)

* _Subscriptions_ (see _API subscriptions_)

* _News Feed_
** _getNews_
*** REST: GET
*** URL: '/newsfeed/getnews/:offset?'
*** Headers: Authorization (JWT, if user is logged in, nothing if not logged in)
*** Parameters: offset - index of newsfeed item to start at
*** Defaults: with no parameter in request, defaults to 0
*** Returns: JSON list of news feed items (maximum of 10 items returned per call)
**** GENRE
**** Link
**** Title
**** Description
**** ImageURL
* _Artist of the Week_
** REST: GET
** URL: '/wp-json/wp/v2/posts'
** Returns: JSON list of posts
** TODO Parameters:

